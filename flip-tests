#!/bin/bash
# flip-tests
# Copyright Luke Scott 2018

set -euo pipefail
IFS=$'\n\t'

# When called, the process ends.
# Args:
# 	$1: The exit message (print to stderr)
# 	$2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to )
# Example:
# 	test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='xoh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

_PRINT_HELP=false
VERSION=0.1.1
_arg_only_to_x=false
_arg_x_to_only=false
_arg_only_to_default=false
_arg_x_to_default=false
_arg_all_to_default=false

print_help ()
{
	printf '%s\n' "Flip javascript tests between only <--> disabled <--> default <--> only"
    printf '\n'
	printf 'Usage: %s [OPTIONS]\n' "$0"
	printf '\t%s\n' "-ox,--only_to_x"
	printf '\t\t%s\n' "flip tests describe.only and it.only --> xdescribe and xit"
	printf '\t%s\n' "-xo,--x_to_only"
	printf '\t\t%s\n' "flip tests xdescribe and xit --> describe.only and it.only"
	printf '\t%s\n' "-od,--only_to_default"
	printf '\t\t%s\n' "flip tests describe.only and it.only --> describe and it"
	printf '\t%s\n' "-xd,--x_to_default"
	printf '\t\t%s\n' "flip tests xdescribe, xit --> describe and it"
	printf '\t%s\n' "-ad,--all_to_default"
	printf '\t\t%s\n' "flip tests xdescribe, xit, describe.only and it.only --> describe and it"
	printf '\t%s\n' "-h,--help"
	printf '\t\t%s\n' "Prints help"
	printf '\t%s\n' "-v,--version"
	printf '\t\t%s\n' "Prints version"
}

print_version ()
{
	printf "%s" "$VERSION"
}

# The parsing of the command-line
# Arg handling code generated then modified from https://argbash.io/generate
parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			# We support whitespace as a delimiter between option argument and its value.
			# Therefore, we expect the --only_to_x or -ox value.
			# so we watch for --only_to_x and -ox.
			# Since we know that we got the long or short option,
			# we just reach out for the next argument to get the value.
			-ox|--only_to_x)
				_arg_only_to_x=true
				;;
			# We support getopts-style short arguments grouping,
			# so as -ox accepts value, we allow it to be appended to it, so we watch for -ox*
			# and we strip the leading -ox from the argument string using the ${var##-ox} notation.
			-ox*)
				_arg_only_to_x=true
				;;
			-xo|--x_to_only)
				_arg_x_to_only=true
				;;
			-xo*)
				_arg_x_to_only=true
				;;
			-ad|--all_to_default)
				_arg_all_to_default=true
				;;
			-ad*)
				_arg_all_to_default=true
				;;
			-od|--only_to_default)
				_arg_only_to_default=true
				;;
			-od*)
				_arg_only_to_default=true
				;;
			-xd|--x_to_default)
				_arg_x_to_default=true
				;;
			-xd*)
				_arg_x_to_default=true
				;;
			-v|--version)
				print_version
				exit 0
				;;
			-v*)
				print_version
				exit 0
				;;
			# The help argurment doesn't accept a value,
			# we expect the --help or -h, so we watch for them.
			-h|--help)
				print_help
				exit 0
				;;
			# We support getopts-style short arguments clustering,
			# so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
			# After stripping the leading -h from the argument, we have to make sure
			# that the first character that follows coresponds to a short option.
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

flip()
{
  # Allow paths with and without spaces
  rg "$1" -l | sed 's/.*/"&"/'| xargs -L 1 sed -i '' "$2" || true
}

x_to_default()
{
  flip '(^\s*xdescribe\()' 's/^\([[:blank:]]*\)xdescribe(/\1describe(/g'
  flip '(^\s*xit\()' 's/^\([[:blank:]]*\)xit(/\1it(/g'
}

only_to_default()
{

  flip '(^\s*describe\.only\()' 's/^\([[:blank:]]*\)describe.only(/\1describe(/g'
  flip '(^\s*it\.only\()' 's/^\([[:blank:]]*\)it.only(/\1it(/g'
}

if $_arg_only_to_x; then
  flip '(^\s*describe\.only\()' 's/^\([[:blank:]]*\)describe.only(/\1xdescribe(/g'
  flip '(^\s*it\.only\()' 's/^\([[:blank:]]*\)it.only(/\1xit(/g'
elif $_arg_only_to_default; then
  only_to_default
elif $_arg_x_to_only; then
  flip '(^\s*xdescribe\()' 's/^\([[:blank:]]*\)xdescribe(/\1describe.only(/g'
  flip '(^\s*xit\()' 's/^\([[:blank:]]*\)xit(/\1it.only(/g'
elif $_arg_x_to_default; then
  x_to_default
elif $_arg_all_to_default; then
  x_to_default
  only_to_default
else
  die "ERROR: No command executed. Please check help: flip-tests --help" 1
fi;
